<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_selection</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i = 1
var ii, ix, iy

//Generates new random seed
randomize()

//Initiative
mapTime = 0
mapTimeOn = true

//Visuals
image_speed = .3

//Selection
global.control = noone
global.nextChar = noone

//Create Camera
instance_create(x,y,obj_camera)
global.mouseHAdj = 0

//Double click buttons
global.leftMouse = 0
global.rightMouse = 0

//Framerate
room_speed = global.fspd

//Cursor
cIsoX = 0
cIsoY = 0
cIsoZ = 0
cHover = noone
global.zLevel = 0

//Action Control
action = moveControl

//Tile Creation
mapHeight = 50
mapWidth = 50
mapDepth = 3

ix = 0
repeat(mapWidth)
{
    iy = 0
    repeat(mapHeight)
    {
        iz = 0
        repeat(mapDepth)
        {
            map[ix+(mapWidth*iz),iy] = instance_create((room_width/2)+(ix*20)-(iy*20),110+(ix*10)+(iy*10),obj_tile)
            map[ix+(mapWidth*iz),iy].isoX = ix
            map[ix+(mapWidth*iz),iy].isoY = iy
            map[ix+(mapWidth*iz),iy].isoZ = iz
            map[ix+(mapWidth*iz),iy].h = iz*30
            
            if iz != 0
            {
                map[ix+(mapWidth*iz),iy].sprite_index = spr_none
                map[ix+(mapWidth*iz),iy].ground = false 
            }            
            iz += 1
        }   
        iy += 1
    }
    ix += 1
}

//Establish Adjacency
ix = 0
repeat(mapWidth)
{
    iy = 0
    repeat(mapHeight)
    {
        iz = 0
        repeat(mapDepth)
        {
        tile = map[ix+(mapWidth*iz),iy]
        
        //West Adjacency
        if ix &gt; 0
        ds_list_add(tile.adjacent, map[ix-1+(mapWidth*iz),iy])
        //East Adjacency
        if ix &lt; mapWidth-1
        ds_list_add(tile.adjacent, map[ix+1+(mapWidth*iz),iy])
        //North Adjacency
        if iy &gt; 0
        ds_list_add(tile.adjacent, map[ix+(mapWidth*iz),iy-1])
        //South Adjacency
        if iy &lt; mapHeight-1
        ds_list_add(tile.adjacent, map[ix+(mapWidth*iz),iy+1])
          
        //North-West Adjacency
        if ix &gt; 0 &amp;&amp; iy &gt; 0
        ds_list_add(tile.adjacent, map[ix-1+(mapWidth*iz),iy-1])     
        //North-East Adjacency
        if ix &lt; mapWidth-1 &amp;&amp; iy &gt; 0
        ds_list_add(tile.adjacent, map[ix+1+(mapWidth*iz),iy-1])
        //South-West Adjacency
        if ix &gt; 0 &amp;&amp; iy &lt; mapHeight-1
        ds_list_add(tile.adjacent, map[ix-1+(mapWidth*iz),iy+1])
        //South-East Adjacency
        if ix &lt; mapWidth-1 &amp;&amp; iy &lt; mapHeight-1
        ds_list_add(tile.adjacent, map[ix+1+(mapWidth*iz),iy+1])
        
        //Down-West Adjacency
        if ix &gt; 0 &amp;&amp; iz &gt; 0
        ds_list_add(tile.adjacent, map[ix-1+(mapWidth*(iz-1)),iy])
        //Down-East Adjacency
        if ix &lt; mapWidth-1 &amp;&amp; iz &gt; 0
        ds_list_add(tile.adjacent, map[ix+1+(mapWidth*(iz-1)),iy])
        //Down-North Adjacency
        if iy &gt; 0 &amp;&amp; iz &gt; 0
        ds_list_add(tile.adjacent, map[ix+(mapWidth*(iz-1)),iy-1])
        //Down-South Adjacency
        if iy &lt; mapHeight-1 &amp;&amp; iz &gt; 0
        ds_list_add(tile.adjacent, map[ix+(mapWidth*(iz-1)),iy+1])
        //Down Adjacency
        if iz &gt; 0
        ds_list_add(tile.adjacent, map[ix+(mapWidth*(iz-1)),iy])
        
        //Up-West Adjacency
        if ix &gt; 0 &amp;&amp; iz &lt; mapDepth-1
        ds_list_add(tile.adjacent, map[ix-1+(mapWidth*(iz+1)),iy])
        //Up-East Adjacency
        if ix &lt; mapWidth-1 &amp;&amp; iz &lt; mapDepth-1
        ds_list_add(tile.adjacent, map[ix+1+(mapWidth*(iz+1)),iy])
        //Up-North Adjacency
        if iy &gt; 0 &amp;&amp; iz &lt; mapDepth-1
        ds_list_add(tile.adjacent, map[ix+(mapWidth*(iz+1)),iy-1])
        //Up-South Adjacency
        if iy &lt; mapHeight-1 &amp;&amp; iz &lt; mapDepth-1
        ds_list_add(tile.adjacent, map[ix+(mapWidth*(iz+1)),iy+1])
        //Up Adjacency
        if iz &lt; mapDepth-1
        ds_list_add(tile.adjacent, map[ix+(mapWidth*(iz+1)),iy])
        
        iz += 1
        }                              
        iy += 1
    }
    ix += 1
}

//Create Characters
repeat(8)
{
    ii = instance_create((room_width/2)+(i*20)-(i*20),10+(i*10)+(i*10),obj_character)
    ii.isoX = i
    ii.isoY = i
    ii.isoZ = 0
    ii.isoTile = map[i,i]
    ii.x = map[i,i].x
    ii.y = map[i,i].y
    map[i,i].occupant = ii
    
    if i &lt; 2
    {
        control[i] = ii
        ii.team = 1
    }
    else
    {
        ii.team = 2
    }
    i += 1
}

//Adjacency After Map Build
obj_control.alarm[0] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reactivate to Check Adjacency
instance_activate_object(obj_tile)

with(obj_tile)
{
adjacency()

//Clear Up Grid
if ground = false
{
instance_deactivate_object(id)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Timer 
if mapTimeOn = true and global.nextChar != noone
{
    //Advance the Timer
    ii = min(1/global.fspd,global.nextChar.delay)
    mapTime += ii
    
    //Reduce all intiative timers
    with(obj_initiativeSlot)
    {
        delay -= other.ii
        
        //Select
        if delay &lt;= 0
        {
            //TEMP player turns
            if owner.team = 1
            {
                global.control = owner
                owner.controlled = true
                other.mapTimeOn = false
                //Vision
                updateVision()
                
                //Create the Action Bar 
                
                //Run Move Control
                moveControl(0)
            }
            else    //TEMP skip AI turns
            {
                endTurn(4.0)
            }
        }
    }
}


//Mouse
x = mouse_x
y = mouse_y
    
cIsoX = floor(((x-100)/40)+((y-100)/20))-25
cIsoY = floor(((y-100)/20)-((x-100)/40))+25

if cIsoX &gt;= 0 and cIsoX &lt; mapWidth and cIsoY &gt;= 0 and cIsoY &lt; mapHeight
{
    cHover = map[cIsoX+(cIsoZ*mapWidth),cIsoY]
    depth = cHover.depth-1
}
else
{
    cHover = noone
}

//zLevel Scrolling
if mouse_wheel_up()
{
    cIsoZ = min(cIsoZ+1,mapDepth-1)
    global.zLevel = cIsoZ
}

if mouse_wheel_down()
{
    cIsoZ = max(cIsoZ-1,0)
    global.zLevel = cIsoZ
}

//Obsolete Selection
//Selection will be required again when I implement groups
/*
if mouse_check_button_pressed(mb_left)
{
    //Temp
    scr_wipeTiles()
    obj_character.controlled = false
    global.control = noone
    
    if cHover != noone
    {
        if cHover.occupant != noone
        {
            global.control = cHover.occupant
            cHover.occupant.controlled = true
            scr_movementRange(cHover, global.control.movement, global.control.movementBonus)
        }
    }
}
*/

//Execute current action
if mouse_check_button_pressed(mb_right)
{
    if cHover != noone and global.control != noone
    {
        script_execute(action,1)
    }
}

//Pathdrawing
if global.control != noone and action = moveControl
{
    obj_tile.onPath = false
    
    if cHover != noone
    {
        if cHover.move
        {
            i = cHover
            while(i.pathParent != noone)
            {
                i.onPath = 4
                i = i.pathParent
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Cursor
draw_sprite(spr_mouse,0,round(mouse_x),round(mouse_y))
draw_set_colour(c_white)
/*
if cHover != noone
{
    if cHover.occupant != noone
    {
        //draw_text(view_xview+10,view_yview+10,cHover.occupant.name)
    }
}
*/
draw_set_font(fnt_small)
draw_set_halign(fa_right)
drawText(c_black,c_white,view_xview+view_wview-10,view_yview+30,fps)
//draw_set_colour(c_black)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//UI Players
//scr_playerPortrait(5)

//Highlighted Area
if cHover != noone
{
    draw_sprite(spr_selection,image_index,cHover.x,cHover.y+(global.zLevel*30)-cHover.h)  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
