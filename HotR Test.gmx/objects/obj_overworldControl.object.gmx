<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_overworldParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create Mouse
instance_create(x,y,obj_camera)

//World Control
scr_worldControlInitialize()

//Create the Nodes
mapWidth = room_width/100
mapHeight = room_height/100
hover = noone

ix = 0
repeat(mapWidth-1)
{
    ix += 1
    iy = 0
    repeat(mapHeight-1)
    {
        iy += 1
        if random(100) &lt; 90
        {
            instance_create((ix*100)-25+random(50),(iy*100)-25+random(50),obj_travelNode)        
        }
    }
}

alarm[1] = 100

global.activeActor = noone

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_travelNode)
{
    if random(100) &lt; 5 and image_index = 0
    {
        i = instance_create(x,y,obj_party)
        i.node = id
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if collision_point(mouse_x,mouse_y,obj_travelNode,false,false) != noone
{
    hover = collision_point(mouse_x,mouse_y,obj_travelNode,false,false)
}
else
{
    hover = noone
}

if keyboard_check_pressed(global.centerKey)
{
    obj_camera.x = global.activeActor.x
    obj_camera.y = global.activeActor.y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hover != noone
{
    with(hover)
    {
        ii = 0
        repeat(ds_list_size(adjacent))
        {
            i = ds_list_find_value(adjacent, ii)
            draw_set_colour(c_black)
            draw_line_width(x,y,i.x,i.y,6)
            draw_set_colour(c_white)
            draw_line_width(x,y,i.x,i.y,2)
            ii += 1
        }
    }
}

with(obj_travelNode)
{
    draw_self()
    draw_set_halign(fa_center)
    draw_set_font(fnt_tiny)
    //drawText(c_black,c_white,x,y-20,spread)
    //drawText(c_black,c_white,x,y-30,string_format(height,2,1))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
