<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_terrain</parentName>
  <maskName>spr_metremask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Adjacency
adjacent = ds_list_create()
walk = ds_list_create()

//Movement
pathable = true
ground = true
cost = 1

//Light
lR = random(1)
lG = random(1)
lB = random(1)
alpha = 1

//Details
occupant = noone
heightMap = random(global.battlefield.tile.height*6)-(global.battlefield.tile.height*3)+30
humidity = random(global.battlefield.tile.humidity)

//Pathing
overlay = 0
onPath = false
g = 0
h = 0
hAdj = 0
move = false
rangedAttack = false
meleeAttack = false
pathParent = noone
zoneControl = false
threatened = false
retreatTile = false

//Coordinates
isoX = 0
isoY = 0
isoZ = 0
sightTile = id

//Free Space (NESWU)
space[0] = 0
space[1] = 0
space[2] = 0
space[3] = 0
space[4] = 0

//Walls (NESW)
wall[0] = noone
wall[1] = noone
wall[2] = noone
wall[3] = noone

level[0] = spr_none
level[1] = spr_none
level[2] = spr_none
level[3] = spr_none
level[4] = spr_none
trimColour = c_white

//Visuals
image_index = random(16)
image_speed = 0
vis = false
scrollVis = false
doodads = 0
doodadSprite[0] = spr_none
doodadX[0] = x
doodadY[0] = y
doodadImage[0] = 0
doodadAnim[0] = 0
doodadFlip[0] = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(adjacent)
ds_list_destroy(walk)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depthCheck(10)

if isoZ &lt; obj_control.mapDepth-1
{
    if obj_control.map[isoX+(obj_control.mapWidth*(isoZ+1)),isoY].ground = false
    {
        sightTile = obj_control.map[isoX+(obj_control.mapWidth*(isoZ+1)),isoY]
    }
}

//Temp Random Mud
if ground = true
{
    if humidity &gt; 10+random(2)
    {    
        sprite_index = spr_mudTile
        cost = 1.5
    }
}

doodads = 0
repeat(min(irandom(5),irandom(8)))
{
    doodadSprite[doodads] = spr_grassTuft
    doodadX[doodads] = x-15+random(30)
    doodadY[doodads] = y-2+doodads
    doodadImage[doodads] = irandom(7)
    doodadAnim[doodads] = 0
    doodadFlip[doodads] = choose(1,-1)
    doodads += 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isoZ &lt;= global.zLevel or global.zViewToggle = true
{
    if vis != false and scrollVis != false
    {
        if vis = 2
        {
            shader_set_uniform_f(global.shader_light, (lR+lG+lB)/3, (lR+lG+lB)/3, (lR+lG+lB)/3, alpha);
        }
        else
        {
            shader_set_uniform_f(global.shader_light, lR, lG, lB, alpha);
        }
        
        if wall[0] != noone
        {
            draw_sprite_ext(wall[0].sprite_index,wall[0].image_index,wall[0].x,wall[0].y-h+(global.zLevel*15),wall[0].facing,1,0,c_white,1)
        }
        if wall[3] != noone
        {
            draw_sprite_ext(wall[3].sprite_index,wall[3].image_index,wall[3].x,wall[3].y-h+(global.zLevel*15),wall[3].facing,1,0,c_white,1)
        }
        
        draw_sprite(sprite_index,image_index,x,y-h+(global.zLevel*15))

        for(i=0;i&lt;5;i++)
        {
            //if vis = 2
            //{
            //    draw_sprite_ext(level[i],i,x,y-h+(global.zLevel*15),1,1,0,c_gray,1)
            //}
            //else
            //{
                draw_sprite_ext(level[i],i,x,y-h+(global.zLevel*15),1,1,0,trimColour,1)
            //}
        }
        
        for(i=0;i&lt;doodads;i++)
        {
            draw_sprite_ext(doodadSprite[i],doodadImage[i],doodadX[i],doodadY[i]-h+(global.zLevel*15),doodadFlip[i],1,0,c_white,1)
        }
        
        if  overlay != 0 || onPath &gt;= 4 //(global.zLevel = isoZ and overlay != 0)
        {
            if isoZ = global.zLevel or onPath &gt;= 4
            {
                draw_sprite(spr_tilePathing,max(overlay,onPath),x,y-h+(global.zLevel*15))
            }
            else 
            {
                draw_sprite(spr_tilePathing,overlay+5,x,y-h+(global.zLevel*15))
            }
        }
        //if zoneControl = true 
        //{
        //    draw_sprite(spr_enemyselect,0,x,y)
        //}
    }
    else
    {
        if wall[0] != noone
        {
            draw_sprite_ext(wall[0].sprite_index,wall[0].image_index,wall[0].x,wall[0].y-h+(global.zLevel*15),wall[0].facing,1,0,c_black,1)
        }
        if wall[3] != noone
        {
            draw_sprite_ext(wall[3].sprite_index,wall[3].image_index,wall[3].x,wall[3].y-h+(global.zLevel*15),wall[3].facing,1,0,c_black,1)
        }
    
        draw_sprite_ext(sprite_index,image_index,x,y-h+(global.zLevel*15),1,1,0,c_black,1)
    }
}

/*
if id = obj_control.cHover
{  
    draw_set_colour(c_green)
    for(i=0;i&lt;ds_list_size(walk);i++)
    {
        draw_line(x,y,ds_list_find_value(walk,i).x,ds_list_find_value(walk,i).y)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
