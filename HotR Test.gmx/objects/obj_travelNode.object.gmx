<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_location</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_overworldParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Visuals
image_index = choose(0,0,0,1,2,3)
depth = -image_index
image_speed = 0

//Adjacency
adjacent = ds_list_create()
alarm[0] = 5

hover = false
spread = false

switch(image_index)
{
    case 0: height = 1 break
    case 1: height = -1 break
    case 2: spread = true height = choose(4,5,6) break
    case 3: spread = true height = choose(-4,-6,-8) break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i = 0

with(obj_travelNode)
{
    if distance_to_object(other) &lt; 160 and sign(height) = sign(other.height)
    {
        ds_list_add(other.adjacent, id)
        other.i += 1
    }
}

if i = 0
{
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    ii = 0
    repeat(ds_list_size(adjacent))
    {
        i = ds_list_find_value(adjacent, ii)
        if i.spread = false
        {
            i.height += (height-i.height)*(.25+random(.75))
            i.alarm[1] = 5
            ii += 1
            i.spread = true
        }
    }
    
ds_list_clear(adjacent)
alarm[2] = 50

if height &lt;= -4
{
image_index = 3
}
else if height &lt;= 0
{
image_index = 1
depth = -3
}
else if height &lt;= 4
{
image_index = 0
depth = -1
}
else
{
image_index = 2
depth = -2
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i = 0

with(obj_travelNode)
{
    if distance_to_object(other) &lt; 160
    {
        ds_list_add(other.adjacent, id)
        other.i += 1
    }
}

if i = 0
{
    instance_destroy()
}
else //if spread = true
{
    alarm[1] = 5
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_party)
{
    if node = other.id
    {
        battleSetup()
    }
}

global.activeActor.x = x
global.activeActor.y = y
global.activeActor.node = id

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if point_in_rectangle(x,y,view_xview-120,view_yview-120,view_xview+view_wview+120,view_yview+view_hview+120)
{
if ds_list_size(adjacent) &gt; 1
{
    if image_index = 0 or image_index = 2
    {
        draw_set_colour(c_green)
        draw_primitive_begin(pr_trianglefan)
        draw_vertex(x, y)
        
            ii = 0
            repeat(ds_list_size(adjacent))
            {
                i = ds_list_find_value(adjacent, ii)
                draw_vertex(i.x, i.y)
                ii += 1
            }
        i = ds_list_find_value(adjacent, 0)
        draw_vertex(i.x, i.y)
            
        draw_primitive_end()
    }
    
    if image_index = 2
    {
        draw_set_colour(c_ltgray)
        draw_primitive_begin(pr_trianglefan)
        draw_vertex(x, y)
        
            ii = 0
            repeat(ds_list_size(adjacent))
            {
                i = ds_list_find_value(adjacent, ii)
                draw_vertex((x+i.x)/2, (y+i.y)/2)
                ii += 1
            }
        i = ds_list_find_value(adjacent, 0)
        draw_vertex((x+i.x)/2, (y+i.y)/2)
            
        draw_primitive_end()
    }
    
    if image_index = 1
    {
        ii = 0
        repeat(ds_list_size(adjacent))
        {
            i = ds_list_find_value(adjacent, ii)
            draw_set_colour(8404992)
            draw_line_width(x, y, i.x, i.y, 3)
            ii += 1
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
